$date
	Wed Dec  8 00:49:56 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module test $end
$var reg 1 ! CLK $end
$scope module miProcesador $end
$var wire 32 " Addresss [31:0] $end
$var wire 1 ! CLK $end
$var wire 32 # DataWr [31:0] $end
$var wire 1 $ reset $end
$var wire 5 % rs2 [4:0] $end
$var wire 5 & rs1 [4:0] $end
$var wire 5 ' rd [4:0] $end
$var wire 32 ( out [31:0] $end
$var wire 32 ) in [31:0] $end
$var wire 32 * RUrs2 [31:0] $end
$var wire 32 + RUrs1 [31:0] $end
$var wire 1 , RUWr $end
$var wire 2 - RUDataWrSrc [1:0] $end
$var wire 7 . Opcode [6:0] $end
$var wire 1 / NextPCSrc $end
$var wire 32 0 Instruction [31:0] $end
$var wire 25 1 Inst [24:0] $end
$var wire 3 2 ImmSrc [2:0] $end
$var wire 32 3 ImmExt [31:0] $end
$var wire 7 4 Funct7 [6:0] $end
$var wire 3 5 Funct3 [2:0] $end
$var wire 32 6 Datawr [31:0] $end
$var wire 32 7 DataRd [31:0] $end
$var wire 1 8 DMWr $end
$var wire 3 9 DMCtrl [2:0] $end
$var wire 5 : BrOp [4:0] $end
$var wire 32 ; B [31:0] $end
$var wire 32 < Address [31:0] $end
$var wire 32 = ALURes [31:0] $end
$var wire 4 > ALUOp [3:0] $end
$var wire 1 ? ALUBSrc $end
$var wire 1 @ ALUASrc $end
$var wire 32 A A [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 A
0@
1?
b0 >
b100 =
b0 <
b100 ;
b10101 :
b0 9
08
b0 7
b100 6
b0 5
b0 4
b100 3
b0 2
b1000010100000101 1
b10000101000001010010011 0
0/
b10011 .
b0 -
1,
b0 +
b0 *
b100 )
b100 (
b101 '
b101 &
b100 %
z$
b0 #
b100 "
0!
$end
#10
b11 ;
b11 3
b110011000000110 1
b110 '
b11 %
b110 &
b1000 )
b1100110000001100010011 0
b1000 (
b100 <
b11 6
b11 "
b11 =
b0 A
b0 +
1!
#20
0!
#30
b10000000110 3
b1000 >
0?
b100000001100010100010011 1
b10011 '
b11 #
b11 *
b110 %
b101 &
b100000 4
b110011 .
b1100 )
b1000000011000101000100110110011 0
b1100 (
b1000 <
b1 6
b1 "
b1 =
b100 A
b100 +
1!
#40
0!
#50
b111 6
b111 "
b111 =
b110 3
b0 >
b1100010100010100 1
b10100 '
b0 4
b10000 )
b11000101000101000110011 0
b10000 (
b1100 <
1!
#60
0!
#70
b111 "
b111 =
b0 6
b0 3
b0 ;
b111 A
b1 -
18
1?
b10 2
b100111010000000000 1
b0 '
b1 #
b1 *
b10011 %
b111 +
b10100 &
b100011 .
b10100 )
b1001110100000000000100011 0
b10100 (
b10000 <
1!
#80
0!
#90
b110 ;
b1 6
b111 "
b111 =
b110 3
b1 7
b1 A
08
b0 2
b1101001100010110 1
b10110 '
b11 #
b11 *
b110 %
b1 +
b10011 &
b11 .
b11000 )
b11010011000101100000011 0
b11000 (
b10100 <
1!
#100
0!
#110
b0 7
b0 ;
b0 "
b0 =
b0 6
b0 3
1/
b0 A
b0 :
b0 -
b10 2
0,
b0 1
b0 '
b0 #
b0 *
b0 %
b0 +
b0 &
b1100011 .
b0 )
b1100011 0
b11100 (
b11000 <
1!
#120
0!
#130
b1000 6
b100 ;
b100 )
b1000 "
b1000 =
b100 3
0/
b100 A
b10101 :
b0 2
1,
b1000010100000101 1
b101 '
b100 %
b100 +
b101 &
b10011 .
b10000101000001010010011 0
b100 (
b0 <
1!
#140
0!
#150
b0 7
b11 ;
b11 3
b110011000000110 1
b110 '
b11 %
b110 &
b1000 )
b1100110000001100010011 0
b1000 (
b100 <
b110 6
b110 "
b110 =
b11 A
b11 +
1!
#160
0!
